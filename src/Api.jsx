// src/Api.jsx
// Unified API call wrapper for authenticated and unauthenticated requests
export const apiCall = async ({
  url,
  method = "GET",
  token = true,
  body = null,
}) => {
  const headers = { "Content-Type": "application/json" };
  if (token) {
    const savedToken = localStorage.getItem("token");
    if (savedToken) {
      headers["Authorization"] = `Bearer ${savedToken}`;
    }
  }

  const res = await fetch(url, {
    method,
    headers,
    body: body ? JSON.stringify(body) : null,
  });

  const data = await res.json();
  if (!res.ok) {
    throw new Error(data.error || "Unexpected error");
  }

  return data;
};

// Log in an admin user with email and password
export const loginUser = async (email, password) => {
  return apiCall({
    url: "http://localhost:5005/admin/auth/login",
    method: "POST",
    token: false,
    body: { email, password },
  });
};

// Register a new admin user
export const registerUser = async (email, password, name) => {
  return apiCall({
    url: "http://localhost:5005/admin/auth/register",
    method: "POST",
    token: false,
    body: { email, password, name },
  });
};

// Logout the currently logged-in user
export const logoutUser = async () => {
  return apiCall({
    url: "http://localhost:5005/admin/auth/logout",
    method: "POST",
    token: true,
    body: {},
  });
};

// Get all games owned by the logged-in user, sorted by creation time (newest first)
export const getGames = async () => {
  const data = await apiCall({
    url: "http://localhost:5005/admin/games",
    method: "GET",
    token: true,
  });

  const rawGames = Object.values(data.games || {});
  const sorted = rawGames.sort((a, b) => b.createdAt - a.createdAt);
  return sorted;
};

// Overwrite the current game list (used internally by createGame)
export const putGames = async (games) => {
  return apiCall({
    url: "http://localhost:5005/admin/games",
    method: "PUT",
    token: true,
    body: { games },
  });
};

// Create a new game with a given name and optional thumbnail
export const createGame = async (name, thumbnail = "") => {
  const games = await getGames();
  //   const newId = Math.max(0, ...games.map((g) => g.id || 0)) + 1;
  //   console.log(newId)
  const owner = localStorage.getItem("email");
  if (!owner) throw new Error("Current user not found");

  const newGameDraft = {
    // id: newId,
    name,
    owner,
    thumbnail,
    questions: [],
    createdAt: Date.now(),
  };

  // Add new game draft to existing games
  await putGames([...games, newGameDraft]);
  // Pull again to get the id generated by the real backend
  const updatedGames = await getGames();
  const addedGame = updatedGames.find(
    (g) => g.name === name && g.createdAt === newGameDraft.createdAt
  );

  if (!addedGame || !addedGame.id) {
    throw new Error("Failed to retrieve created game with valid ID");
  }
  return addedGame;
};

// Start, advance, or end a game session
export const mutateGame = async (gameId, mutationType) => {
  return apiCall({
    url: `http://localhost:5005/admin/game/${gameId}/mutate`,
    method: "POST",
    token: true,
    body: { mutationType },
  });
};

// Get the current status of a session (e.g., waiting, in progress, ended)
export const getSessionStatus = async (sessionId) => {
  return apiCall({
    url: `http://localhost:5005/admin/session/${sessionId}/status`,
    method: "GET",
    token: true,
  });
};

// Get the final results of a completed session
export const getSessionResults = async (sessionId) => {
  return apiCall({
    url: `http://localhost:5005/admin/session/${sessionId}/results`,
    method: "GET",
    token: true,
  });
};

// Player joins a session with a name (or "__validate" to test if session exists)
export const joinSession = async (sessionId, name) => {
  return apiCall({
    url: `http://localhost:5005/play/join/${sessionId}`,
    method: "POST",
    token: false,
    body: { name },
  });
};

// Get the status of a player (whether session has started or ended)
export const getPlayerStatus = async (playerId) => {
  return apiCall({
    url: `http://localhost:5005/play/${playerId}/status`,
    method: "GET",
    token: false,
  });
};

// Get the current question for a player
export const getCurrentQuestion = async (playerId) => {
  return apiCall({
    url: `http://localhost:5005/play/${playerId}/question`,
    method: "GET",
    token: false,
  });
};

// Submit a player's answer for the current question
export const submitAnswer = async (playerId, answer) => {
  return apiCall({
    url: `http://localhost:5005/play/${playerId}/answer`,
    method: "PUT",
    token: false,
    body: answer,
  });
};

// Get the correct answer for the current question (after it's been submitted)
export const getCorrectAnswer = async (playerId) => {
  return apiCall({
    url: `http://localhost:5005/play/${playerId}/answer`,
    method: "GET",
    token: false,
  });
};

// Get final result summary for a specific player
export const getPlayerResult = async (playerId) => {
  return apiCall({
    url: `http://localhost:5005/play/${playerId}/results`,
    method: "GET",
    token: false,
  });
};
